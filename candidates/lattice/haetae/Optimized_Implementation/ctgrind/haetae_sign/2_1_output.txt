==7534== Memcheck, a memory error detector
==7534== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==7534== Using Valgrind-3.16.1-36d6727e1d-20200622X and LibVEX; rerun with -h for copyright info
==7534== Command: ./lattice/haetae/Optimized_Implementation/ctgrind/build/haetae_sign/taint_2_1
==7534== Parent PID: 7071
==7534== 
--7534-- 
--7534-- Valgrind options:
--7534--    -s
--7534--    --track-origins=yes
--7534--    --leak-check=full
--7534--    --show-leak-kinds=all
--7534--    --verbose
--7534--    --log-file=lattice/haetae/Optimized_Implementation/ctgrind/haetae_sign/2_1_output.txt
--7534-- Contents of /proc/version:
--7534--   Linux version 6.3.13-linuxkit (root@buildkitsandbox) (gcc (Alpine 12.2.1_git20220924-r10) 12.2.1 20220924, GNU ld (GNU Binutils) 2.40) #1 SMP PREEMPT_DYNAMIC Thu Sep  7 07:54:49 UTC 2023
--7534-- 
--7534-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-sse3-ssse3-avx-avx2-bmi-f16c-rdrand
--7534-- Page sizes: currently 4096, max supported 4096
--7534-- Valgrind library directory: /usr/share/valgrind/lib/valgrind
--7534-- Reading syms from /home/lattice/haetae/Optimized_Implementation/ctgrind/build/haetae_sign/taint_2_1
--7534-- Reading syms from /usr/lib/x86_64-linux-gnu/ld-2.31.so
--7534--   Considering /usr/lib/debug/.build-id/45/87364908de169dec62ffa538170118c1c3a078.debug ..
--7534--   .. build-id is valid
--7534-- Reading syms from /usr/share/valgrind/lib/valgrind/memcheck-amd64-linux
--7534--    object doesn't have a dynamic symbol table
--7534-- Scheduler: using generic scheduler lock implementation.
--7534-- Reading suppressions file: /usr/share/valgrind/lib/valgrind/default.supp
==7534== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-7534-by-???-on-841fc627c6f5
==7534== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-7534-by-???-on-841fc627c6f5
==7534== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-7534-by-???-on-841fc627c6f5
==7534== 
==7534== TO CONTROL THIS PROCESS USING vgdb (which you probably
==7534== don't want to do, unless you know exactly what you're doing,
==7534== or are doing some strange experiment):
==7534==   /usr/share/valgrind/lib/valgrind/../../bin/vgdb --pid=7534 ...command...
==7534== 
==7534== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==7534==   /path/to/gdb ./lattice/haetae/Optimized_Implementation/ctgrind/build/haetae_sign/taint_2_1
==7534== and then give GDB the following command
==7534==   target remote | /usr/share/valgrind/lib/valgrind/../../bin/vgdb --pid=7534
==7534== --pid is optional if only one valgrind process is running
==7534== 
--7534-- REDIR: 0x4022e20 (ld-linux-x86-64.so.2:strlen) redirected to 0x580ccb62 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--7534-- REDIR: 0x4022bf0 (ld-linux-x86-64.so.2:index) redirected to 0x580ccb7c (vgPlain_amd64_linux_REDIR_FOR_index)
--7534-- Reading syms from /usr/share/valgrind/lib/valgrind/vgpreload_core-amd64-linux.so
--7534-- Reading syms from /usr/share/valgrind/lib/valgrind/vgpreload_memcheck-amd64-linux.so
==7534== WARNING: new redirection conflicts with existing -- ignoring it
--7534--     old: 0x04022e20 (strlen              ) R-> (0000.0) 0x580ccb62 vgPlain_amd64_linux_REDIR_FOR_strlen
--7534--     new: 0x04022e20 (strlen              ) R-> (2007.0) 0x0483ecf0 strlen
--7534-- REDIR: 0x401f600 (ld-linux-x86-64.so.2:strcmp) redirected to 0x483fc60 (strcmp)
--7534-- REDIR: 0x4023380 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x4843780 (mempcpy)
--7534-- Reading syms from /home/lattice/haetae/Optimized_Implementation/ctgrind/build/libs/lib2.so
--7534-- Reading syms from /usr/lib/libctgrind.so
--7534-- Reading syms from /home/lattice/haetae/Optimized_Implementation/ctgrind/build/libs/libfips202.so
--7534-- Reading syms from /home/lattice/haetae/Optimized_Implementation/ctgrind/build/libs/libRNG.so
--7534-- Reading syms from /usr/lib/x86_64-linux-gnu/libc-2.31.so
--7534--   Considering /usr/lib/debug/.build-id/18/78e6b475720c7c51969e69ab2d276fae6d1dee.debug ..
--7534--   .. build-id is valid
--7534-- Reading syms from /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1
--7534--    object doesn't have a symbol table
--7534-- Reading syms from /usr/lib/x86_64-linux-gnu/libdl-2.31.so
--7534--   Considering /usr/lib/debug/.build-id/c0/f40155b3f8bf8c494fa800f9ab197ebe20ed6e.debug ..
--7534--   .. build-id is valid
--7534-- Reading syms from /usr/lib/x86_64-linux-gnu/libpthread-2.31.so
--7534--   Considering /usr/lib/debug/.build-id/7b/4536f41cdaa5888408e82d0836e33dcf436466.debug ..
--7534--   .. build-id is valid
--7534-- REDIR: 0x4960480 (libc.so.6:memmove) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x495f780 (libc.so.6:strncpy) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x49607b0 (libc.so.6:strcasecmp) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x495f0a0 (libc.so.6:strcat) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x495f7e0 (libc.so.6:rindex) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x4961c50 (libc.so.6:rawmemchr) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x497cce0 (libc.so.6:wmemchr) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x497c820 (libc.so.6:wcscmp) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x49605e0 (libc.so.6:mempcpy) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x4960410 (libc.so.6:bcmp) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x495f710 (libc.so.6:strncmp) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x495f150 (libc.so.6:strcmp) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x4960540 (libc.so.6:memset) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x497c7e0 (libc.so.6:wcschr) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x495f670 (libc.so.6:strnlen) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x495f230 (libc.so.6:strcspn) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x4960800 (libc.so.6:strncasecmp) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x495f1d0 (libc.so.6:strcpy) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x4960950 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x497df50 (libc.so.6:wcsnlen) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x497c860 (libc.so.6:wcscpy) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x495f820 (libc.so.6:strpbrk) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x495f100 (libc.so.6:index) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x495f630 (libc.so.6:strlen) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x4968bb0 (libc.so.6:memrchr) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x4960850 (libc.so.6:strcasecmp_l) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x49603d0 (libc.so.6:memchr) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x497c930 (libc.so.6:wcslen) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x495fae0 (libc.so.6:strspn) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x4960750 (libc.so.6:stpncpy) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x49606f0 (libc.so.6:stpcpy) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x4961c90 (libc.so.6:strchrnul) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x49608a0 (libc.so.6:strncasecmp_l) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x49ed850 (libc.so.6:__memcpy_chk) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x49602f0 (libc.so.6:strstr) redirected to 0x4833232 (_vgnU_ifunc_wrapper)
--7534-- REDIR: 0x4a48500 (libc.so.6:__strrchr_avx2) redirected to 0x483e6a0 (rindex)
--7534-- REDIR: 0x4a486d0 (libc.so.6:__strlen_avx2) redirected to 0x483ebd0 (strlen)
--7534-- REDIR: 0x495bb10 (libc.so.6:calloc) redirected to 0x483da80 (calloc)
--7534-- REDIR: 0x495a0e0 (libc.so.6:malloc) redirected to 0x483b789 (malloc)
--7534-- REDIR: 0x4a4bb60 (libc.so.6:__memset_avx2_unaligned_erms) redirected to 0x4842640 (memset)
--7534-- REDIR: 0x495a6d0 (libc.so.6:free) redirected to 0x483c98a (free)
==7534== Invalid write of size 8
==7534==    at 0x48BA689: randombytes (in /home/lattice/haetae/Optimized_Implementation/ctgrind/build/libs/libRNG.so)
==7534==    by 0x109209: generate_test_vectors (in /home/lattice/haetae/Optimized_Implementation/ctgrind/build/haetae_sign/taint_2_1)
==7534==    by 0x109295: main (in /home/lattice/haetae/Optimized_Implementation/ctgrind/build/haetae_sign/taint_2_1)
==7534==  Address 0x4db3040 is 0 bytes after a block of size 0 alloc'd
==7534==    at 0x483DB0A: calloc (vg_replace_malloc.c:760)
==7534==    by 0x10923D: main (in /home/lattice/haetae/Optimized_Implementation/ctgrind/build/haetae_sign/taint_2_1)
==7534== 

valgrind: m_mallocfree.c:303 (get_bszB_as_is): Assertion 'bszB_lo == bszB_hi' failed.
valgrind: Heap block lo/hi size mismatch: lo = 64, hi = 1773841811996233223.
This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==7534==    at 0x5804819A: show_sched_status_wrk (m_libcassert.c:406)
==7534==    by 0x580482C7: report_and_quit (m_libcassert.c:477)
==7534==    by 0x5804846B: vgPlain_assert_fail (m_libcassert.c:543)
==7534==    by 0x58052BF4: get_bszB_as_is (m_mallocfree.c:303)
==7534==    by 0x58052BF4: is_inuse_block (m_mallocfree.c:331)
==7534==    by 0x58052BF4: vgPlain_describe_arena_addr (m_mallocfree.c:1592)
==7534==    by 0x5803EFDA: vgPlain_describe_addr (m_addrinfo.c:185)
==7534==    by 0x5803DE8F: vgMemCheck_update_Error_extra (mc_errors.c:1185)
==7534==    by 0x58043044: vgPlain_maybe_record_error (m_errormgr.c:822)
==7534==    by 0x5803D2C8: vgMemCheck_record_address_error (mc_errors.c:765)
==7534==    by 0x1009B56E8B: ???
==7534==    by 0x1008DA9F2F: ???
==7534==    by 0x1008DA9F17: ???
==7534==    by 0x1008DA9F2F: ???
==7534==    by 0x1008DA9F3F: ???

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 7534)
==7534==    at 0x48BA92A: randombytes (in /home/lattice/haetae/Optimized_Implementation/ctgrind/build/libs/libRNG.so)
==7534==    by 0x109209: generate_test_vectors (in /home/lattice/haetae/Optimized_Implementation/ctgrind/build/haetae_sign/taint_2_1)
==7534==    by 0x109295: main (in /home/lattice/haetae/Optimized_Implementation/ctgrind/build/haetae_sign/taint_2_1)
client stack range: [0x1FFEFFE000 0x1FFF000FFF] client SP: 0x1FFF000A80
valgrind stack range: [0x1008CAA000 0x1008DA9FFF] top usage: 18696 of 1048576


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

