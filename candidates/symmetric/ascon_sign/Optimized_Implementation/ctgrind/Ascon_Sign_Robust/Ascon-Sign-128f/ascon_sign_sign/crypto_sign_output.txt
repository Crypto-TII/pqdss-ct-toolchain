==361== Memcheck, a memory error detector
==361== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==361== Using Valgrind-3.16.1-36d6727e1d-20200622X and LibVEX; rerun with -h for copyright info
==361== Command: ./symmetric/ascon_sign/Optimized_Implementation/ctgrind/Ascon_Sign_Robust/Ascon-Sign-128f/build/ascon_sign_sign/taint_crypto_sign
==361== Parent PID: 290
==361== 
--361-- 
--361-- Valgrind options:
--361--    -s
--361--    --track-origins=yes
--361--    --leak-check=full
--361--    --show-leak-kinds=all
--361--    --verbose
--361--    --log-file=symmetric/ascon_sign/Optimized_Implementation/ctgrind/Ascon_Sign_Robust/Ascon-Sign-128f/ascon_sign_sign/crypto_sign_output.txt
--361-- Contents of /proc/version:
--361--   Linux version 6.3.13-linuxkit (root@buildkitsandbox) (gcc (Alpine 12.2.1_git20220924-r10) 12.2.1 20220924, GNU ld (GNU Binutils) 2.40) #1 SMP PREEMPT_DYNAMIC Thu Sep  7 07:54:49 UTC 2023
--361-- 
--361-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-sse3-ssse3-avx-avx2-bmi-f16c-rdrand
--361-- Page sizes: currently 4096, max supported 4096
--361-- Valgrind library directory: /usr/share/valgrind/lib/valgrind
--361-- Reading syms from /home/nist_signatures/symmetric/ascon_sign/Optimized_Implementation/ctgrind/Ascon_Sign_Robust/Ascon-Sign-128f/build/ascon_sign_sign/taint_crypto_sign
--361-- Reading syms from /usr/lib/x86_64-linux-gnu/ld-2.31.so
--361--   Considering /usr/lib/debug/.build-id/c6/90288cb132a32066848b987fe4bfeb82e54291.debug ..
--361--   .. build-id is valid
--361-- Reading syms from /usr/share/valgrind/lib/valgrind/memcheck-amd64-linux
--361--    object doesn't have a dynamic symbol table
--361-- Scheduler: using generic scheduler lock implementation.
--361-- Reading suppressions file: /usr/share/valgrind/lib/valgrind/default.supp
==361== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-361-by-???-on-60267fa295ab
==361== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-361-by-???-on-60267fa295ab
==361== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-361-by-???-on-60267fa295ab
==361== 
==361== TO CONTROL THIS PROCESS USING vgdb (which you probably
==361== don't want to do, unless you know exactly what you're doing,
==361== or are doing some strange experiment):
==361==   /usr/share/valgrind/lib/valgrind/../../bin/vgdb --pid=361 ...command...
==361== 
==361== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==361==   /path/to/gdb ./symmetric/ascon_sign/Optimized_Implementation/ctgrind/Ascon_Sign_Robust/Ascon-Sign-128f/build/ascon_sign_sign/taint_crypto_sign
==361== and then give GDB the following command
==361==   target remote | /usr/share/valgrind/lib/valgrind/../../bin/vgdb --pid=361
==361== --pid is optional if only one valgrind process is running
==361== 
--361-- REDIR: 0x4022e20 (ld-linux-x86-64.so.2:strlen) redirected to 0x580ccaa2 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--361-- REDIR: 0x4022bf0 (ld-linux-x86-64.so.2:index) redirected to 0x580ccabc (vgPlain_amd64_linux_REDIR_FOR_index)
--361-- Reading syms from /usr/share/valgrind/lib/valgrind/vgpreload_core-amd64-linux.so
--361-- Reading syms from /usr/share/valgrind/lib/valgrind/vgpreload_memcheck-amd64-linux.so
==361== WARNING: new redirection conflicts with existing -- ignoring it
--361--     old: 0x04022e20 (strlen              ) R-> (0000.0) 0x580ccaa2 vgPlain_amd64_linux_REDIR_FOR_strlen
--361--     new: 0x04022e20 (strlen              ) R-> (2007.0) 0x0483ecf0 strlen
--361-- REDIR: 0x401f600 (ld-linux-x86-64.so.2:strcmp) redirected to 0x483fc60 (strcmp)
--361-- REDIR: 0x4023380 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x4843780 (mempcpy)
--361-- Reading syms from /usr/lib/libctgrind.so
--361-- Reading syms from /usr/lib/x86_64-linux-gnu/libc-2.31.so
--361--   Considering /usr/lib/debug/.build-id/e6/78fe54a5d2c2092f8e47eb0b33105e380f7340.debug ..
--361--   .. build-id is valid
--361-- REDIR: 0x48f4480 (libc.so.6:memmove) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48f3780 (libc.so.6:strncpy) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48f47b0 (libc.so.6:strcasecmp) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48f30a0 (libc.so.6:strcat) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48f37e0 (libc.so.6:rindex) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48f5c50 (libc.so.6:rawmemchr) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x4910ce0 (libc.so.6:wmemchr) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x4910820 (libc.so.6:wcscmp) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48f45e0 (libc.so.6:mempcpy) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48f4410 (libc.so.6:bcmp) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48f3710 (libc.so.6:strncmp) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48f3150 (libc.so.6:strcmp) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48f4540 (libc.so.6:memset) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x49107e0 (libc.so.6:wcschr) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48f3670 (libc.so.6:strnlen) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48f3230 (libc.so.6:strcspn) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48f4800 (libc.so.6:strncasecmp) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48f31d0 (libc.so.6:strcpy) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48f4950 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x4911f50 (libc.so.6:wcsnlen) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x4910860 (libc.so.6:wcscpy) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48f3820 (libc.so.6:strpbrk) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48f3100 (libc.so.6:index) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48f3630 (libc.so.6:strlen) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48fcbb0 (libc.so.6:memrchr) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48f4850 (libc.so.6:strcasecmp_l) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48f43d0 (libc.so.6:memchr) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x4910930 (libc.so.6:wcslen) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48f3ae0 (libc.so.6:strspn) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48f4750 (libc.so.6:stpncpy) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48f46f0 (libc.so.6:stpcpy) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48f5c90 (libc.so.6:strchrnul) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x48f48a0 (libc.so.6:strncasecmp_l) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x4981850 (libc.so.6:__memcpy_chk) redirected to 0x48311c1 (_vgnU_ifunc_wrapper)
--361-- REDIR: 0x49dc510 (libc.so.6:__strrchr_avx2) redirected to 0x483e6a0 (rindex)
--361-- REDIR: 0x48efb10 (libc.so.6:calloc) redirected to 0x483da80 (calloc)
==361== Syscall param read(buf) points to unaddressable byte(s)
==361==    at 0x4961FD2: read (read.c:26)
==361==    by 0x1094B3: read (unistd.h:44)
==361==    by 0x1094B3: randombytes (randombytes.c:34)
==361==    by 0x10922C: generate_test_vectors (taint_crypto_sign.c:22)
==361==    by 0x10922C: main (taint_crypto_sign.c:35)
==361==  Address 0x4a49040 is 0 bytes after a block of size 0 alloc'd
==361==    at 0x483DB0A: calloc (vg_replace_malloc.c:760)
==361==    by 0x1091E2: main (taint_crypto_sign.c:28)
==361== 
--361-- REDIR: 0x49df6f0 (libc.so.6:__memcpy_avx_unaligned_erms) redirected to 0x4842750 (memmove)
--361-- REDIR: 0x49df6e0 (libc.so.6:__memcpy_chk_avx_unaligned_erms) redirected to 0x4843870 (__memcpy_chk)
==361== Invalid write of size 8
==361==    at 0x48427E3: memmove (vg_replace_strmem.c:1270)
==361==    by 0x10ADC3: memmove (string_fortified.h:40)
==361==    by 0x10ADC3: crypto_sign (sign.c:254)
==361==    by 0x10926A: main (taint_crypto_sign.c:37)
==361==  Address 0x4a4d340 is 0 bytes after a block of size 17,088 alloc'd
==361==    at 0x483DB0A: calloc (vg_replace_malloc.c:760)
==361==    by 0x109202: main (taint_crypto_sign.c:29)
==361== 
==361== Invalid write of size 8
==361==    at 0x48427EB: memmove (vg_replace_strmem.c:1270)
==361==    by 0x10ADC3: memmove (string_fortified.h:40)
==361==    by 0x10ADC3: crypto_sign (sign.c:254)
==361==    by 0x10926A: main (taint_crypto_sign.c:37)
==361==  Address 0x4a4d348 is 8 bytes after a block of size 17,088 alloc'd
==361==    at 0x483DB0A: calloc (vg_replace_malloc.c:760)
==361==    by 0x109202: main (taint_crypto_sign.c:29)
==361== 
==361== Invalid write of size 8
==361==    at 0x48427F3: memmove (vg_replace_strmem.c:1270)
==361==    by 0x10ADC3: memmove (string_fortified.h:40)
==361==    by 0x10ADC3: crypto_sign (sign.c:254)
==361==    by 0x10926A: main (taint_crypto_sign.c:37)
==361==  Address 0x4a4d350 is 16 bytes after a block of size 17,088 alloc'd
==361==    at 0x483DB0A: calloc (vg_replace_malloc.c:760)
==361==    by 0x109202: main (taint_crypto_sign.c:29)
==361== 

valgrind: m_mallocfree.c:303 (get_bszB_as_is): Assertion 'bszB_lo == bszB_hi' failed.
valgrind: Heap block lo/hi size mismatch: lo = 64, hi = 9271634001716671449.
This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==361==    at 0x5804810A: show_sched_status_wrk (m_libcassert.c:406)
==361==    by 0x58048237: report_and_quit (m_libcassert.c:477)
==361==    by 0x580483DB: vgPlain_assert_fail (m_libcassert.c:543)
==361==    by 0x58052B64: get_bszB_as_is (m_mallocfree.c:303)
==361==    by 0x58052B64: is_inuse_block (m_mallocfree.c:331)
==361==    by 0x58052B64: vgPlain_describe_arena_addr (m_mallocfree.c:1592)
==361==    by 0x5803EF4A: vgPlain_describe_addr (m_addrinfo.c:185)
==361==    by 0x5803DDFF: vgMemCheck_update_Error_extra (mc_errors.c:1185)
==361==    by 0x58042FB4: vgPlain_maybe_record_error (m_errormgr.c:822)
==361==    by 0x5803D238: vgMemCheck_record_address_error (mc_errors.c:765)
==361==    by 0x1009B1EF0B: ???
==361==    by 0x1008EA9F2F: ???
==361==    by 0x1008EA9F17: ???
==361==    by 0x1008EA9F2F: ???
==361==    by 0x1008EA9F3F: ???

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 361)
==361==    at 0x48427FB: memmove (vg_replace_strmem.c:1270)
==361==    by 0x10ADC3: memmove (string_fortified.h:40)
==361==    by 0x10ADC3: crypto_sign (sign.c:254)
==361==    by 0x10926A: main (taint_crypto_sign.c:37)
client stack range: [0x1FFEFFE000 0x1FFF000FFF] client SP: 0x1FFF000448
valgrind stack range: [0x1008DAA000 0x1008EA9FFF] top usage: 18696 of 1048576


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

